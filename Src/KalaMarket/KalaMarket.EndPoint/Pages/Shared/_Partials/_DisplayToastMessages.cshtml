@inject Infrastructure.Settings.ApplicationSettings applicationSettings

@{
	/// Version 3.0

	var toastSettings =
		applicationSettings.ToastSettings;

	int delayStep =
		toastSettings.DelayStep;

	int delay =
		toastSettings.InitialDelay - delayStep;
  

	// نکته مهم
	// در همه شرایط کار نمی‌کند List استفاده از کلاس
	var toastErrors =
		TempData[key: Infrastructure.Messages.MessageType.ToastError.ToString()] as
		System.Collections.Generic.IList<string>;

	var toastWarnings =
		TempData[key: Infrastructure.Messages.MessageType.ToastWarning.ToString()] as
		System.Collections.Generic.IList<string>;

	var toastSuccesses =
		TempData[key: Infrastructure.Messages.MessageType.ToastSuccess.ToString()] as
		System.Collections.Generic.IList<string>;

	if ((toastErrors == null || toastErrors.Count == 0) &&
		(toastWarnings == null || toastWarnings.Count == 0) &&
		(toastSuccesses == null || toastSuccesses.Count == 0))
	{
		return;
	}
}

<div aria-live="polite" aria-atomic="true" class="position-relative">


	@{
		if (toastErrors != null)
		{
			foreach (var message in toastErrors)
			{
				<p class="ToasterError" hidden>@(message)</p>

			}
		}

		if (toastWarnings != null)
		{
			foreach (var message in toastWarnings)
			{
				<p class="ToasterWarning" hidden>@(message)</p>
			}
		}

		if (toastSuccesses != null)
		{
			foreach (var message in toastSuccesses)
			{
				<p class="ToasterSuccess" hidden>@(message)</p>
			}
		}
	}

</div>

<script>

	window.addEventListener('load', (e) => {
		var ToasterError = "ToasterError";
		var ToasterWarning = "ToasterWarning";
		var ToasterSuccess = "ToasterSuccess";

        // Display a warning toast, with no title
        //toastr.warning('My name is Inigo Montoya. You killed my father, prepare to die!')

        //// Display a success toast, with a title
        //toastr.success('Have fun storming the castle!', 'Miracle Max Says')

        //// Display an error toast, with a title
        //toastr.error('I do not think that word means what you think it means.', 'Inconceivable!')

        // Immediately remove current toasts without using animation
     //   toastr.remove()

        // Remove current toasts using animation
       // toastr.clear()

        // Override global options
        //toastr.success('We do have the Kapua suite available.', 'Turtle Bay Resort', {timeOut: 5000})


	var	tOptions = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": true,
            "positionClass": "toast-top-left",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": `@(delay)`,
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
    }
    
        toastr.options = tOptions;
      
       

        var toastElements =
			document.querySelectorAll(`.${ToasterError}`);
		CallToaster(toastElements, ToasterError);
		toastElements =
			document.querySelectorAll(`.${ToasterWarning}`);
		CallToaster(toastElements, ToasterWarning);
		toastElements =
			document.querySelectorAll(`.${ToasterSuccess}`);
		CallToaster(toastElements, ToasterSuccess);
		function CallToaster(toastElements, type) {
            toastElements.forEach((toastElement, index) => {
                
                if (type === ToasterError) {
					console.log(toastElement.innerHTML);
					toastr.error("content");
                    toastr.options.timeOut = toastr.options.timeOut + @(delayStep);
					console.log(ToasterError);
                } else if (type === ToasterWarning) {
                    console.log(ToasterWarning);
                } else if (type === ToasterSuccess) {
                    console.log(ToasterSuccess);
                }

            });
        }
    })

</script>
